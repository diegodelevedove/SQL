/*********** MS SQL SERVER VIA TERMINAL **************/

com o servidor instalado e iniciado
entre no terminal via cmd 
digite 

sqlcmd
Se o terminal apontar 1> significa que CONECTAMOS NO LOCALHOST e podemmos executar os comandos necessários

1> 

** Se você definiou alguma autenticação a maneira certa de iniciar é entrando com os parâmetros

sqlcmd -S myServer\instanceName\SQLEXPRESS -U nomeDoUsuário -P senha

***Lembrando(servidores sql trabalham como uma única instância(oracle,ms server) que significar dizer que 
para cada usuário terei uma instância do banco

********* criando um backup ************
Backup database TestDB to disk = 'D:\testdb_full.bak'
GO
Backup log TestDB to disk = 'D:\testdb_log.trn'

******** restaurando de um arquivo e ou movendo backup **************

Restore database TestDB from disk = 'D:\TestDB_full.bak'
with move 'TestDB' to 'D:\DATA\TestDB_DR.mdf',
move 'TestDB_log' to 'D:\DATA\TestDB_log_DR.ldf',
norecovery
GO
Restore database TestDB from disk = 'D:\TestDB_log.trn' with norecovery


/******** Verificando e Definindo as bases de dados *********/

SELECT 	DB_NAME()
GO

**O go fecha a linha de código e também mostra a base de dados corrente seleciona a base de dados default 
vai aparecer assim

1>-------------
master
**a instância acima é a principal

********* criar um usuário *****************
ex:
create user fulano for login senha

isso deve ser feito sem estar em use database alguma.

/***** Listar as Databases

select name from sys.databases;
go


/********* Listar Campos *************

Pra conferir se a tabela foi criada entre com:

exec sp_columns nomedaTabela
go

ou 

select * from sys.tables
go

ou 

select * from information_schema.tables
go

/********* Drop Databases

*importante = mude para outra database se a database que você quer deletar é a base de dados corrente

use outraDatabase

DROP database [nomeDaDatabase] -- Use as chaves mesmo
Go
*** Verifique se foi dropada

exec sp_columns nomeDatabela
go

-- Dropando a database pelo cmd sem entra no server

sqlcmd -S .\SQLEXPRESS -q drop database [nomedaDatabase]


-------------- Parte Prática --------------------
CREATE DATABASE nomeDaDatabase
go
use nomeDatabase
go


**************** SQL PRÁTICO **********************

----- criando as tabelas ----------

*** LEMBRAR DE SEMPRE USAR O GO

CREATE TABLE CUSTOMERS( 
   ID   INT              NOT NULL, 
   NAME VARCHAR (20)     NOT NULL, 
   AGE  INT              NOT NULL, 
   ADDRESS  CHAR (25) , 
   SALARY   DECIMAL (18, 2),        
   PRIMARY KEY (ID));
GO


CREATE TABLE ACCOUNTS (

	ACC_ID INT NOT NULL,
	ACC_TOTAL DECIMAL(10,2) NOT NULL,
	ACC_NUMBER INT NOT NULL,
	ACC_FK INT NOT NULL,
	FOREIGN KEY(ACC_FK) REFERENCES CUSTOMERS(ID),
	ON DELETE CASCADE 
)
GO
	



-- Quando uma instrução é inserida com sucesso ele volta pra linha de contexto 1
1>

****** Selecionano todos os registros da tabela

1>SELECT * FROM CUSTOMERS; -- NÃO PRECISO FECHAR O COMANDO MAS PRECISA DO GO
2>GO
--lEMBRAR DO GO

----- INSERT --------

INSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)]   
VALUES (value1, value2, value3,...valueN)

Dando carga

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) 
VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );
  
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) 
VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );  

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) 
VALUES (3, 'kaushik', 23, 'Kota', 2000.00 );  

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) 
VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 ); 
 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) 
VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 );  

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) 
VALUES (6, 'Komal', 22, 'MP', 4500.00 );


ou POde também entrar com valores diretamente como abaixo

INSERT INTO CUSTOMERS VALUES (7, 'Muffy', 24, 'Indore', 10000.00 );

-------- POPULANDO UMA TABELA COM OUTRA TABELA --------------------

INSERT INTO nomePrimeiraTabela
   SELECT column1, column2, ...columnN  
      FROM nomeSegundaTabela 
      [WHERE condition];


----- SELECT ----------

SELECT * FROM table_name
GO

------- UPDATE -----------

UPDATE table_name 
SET column1 = value1, column2 = value2...., columnN = valueN 
WHERE [condition];

Ex: UPDATE CUSTOMERS SET NAME = "Ranesh OSHO" where SALARY = 2000
GO

-------- DELETE -------------

DELETE FROM CUSTOMERS WHERE ID = 4
GO

* delete na tabela inteira

DELETE FROM CUSTOMERS
GO


-------- WHERE --------------
SELECT column1, column2, columnN  
FROM table_name 
WHERE [condition]

ex:
SELECT NAME from CUSTOMERS where SALARY = 2000
GO

SELECT NAME,AGE from CUSTOMERS where AGE = 22 and Name = "Komal"
go


------ like ------------------------

Especificar busca, antes,depois,com ou sem os valores...
Lembre-se das aspas ''

começar com = like 'valor%'
terminar com = like '%valor'
qualquer valor = like '%valor%'

valores que começam com algum valor específico com 3 caracteres = 'valor_%_%'

ex:SELECT * FROM CUSTOMERS WHERE SALARY LIKE '200%'
GO


-------- ORDER BY -----------------
Ordenar por

SELECT column-list  
FROM table_name  
[WHERE condition]  
[ORDER BY column1, column2, .. columnN] [ASC | DESC];

EX: 
SELECT * FROM CUSTOMERS ORDER BY ADDRESS ASC
GO

-------- GROUP BY ------------------------
Agrupar coluna por 

SELECT column1, column2 
FROM table_name 
WHERE [ conditions ] 
GROUP BY column1, column2 
ORDER BY column1, column2 

EX:
SELECT NAME,SUM(SALARY) AS "Soma dos Salários" from CUSTOMERS GROUP BY NAME
GO


---------- DISTINCT --------------------
retorna todos os resultados únicos, exclui os duplicados,usado com select

SELECT DISTINCT column1, column2,.....columnN  
FROM table_name 
WHERE [condition] 

EX:

SELECT DISTINCT NAME,SALARY FROM CUSTOMERS
GO

---------- JOIN ----------------------

Vamos criar outra tabela e juntar as duas

CREATE TABLE ORDERS( 
   OID INT NOT NULL, 
   PRODUCT TEXT  NOT NULL,	
   PRICE DECIMAL(10,2)   NOT NULL,	
   CLIENT_ID INT,	 
   FOREIGN KEY(CLIENT_ID) REFERENCES CUSTOMERS(ID),        
   PRIMARY KEY(OID)
)
GO

Carga

INSERT INTO ORDERS(OID,PRODUCT,PRICE) 
VALUES(01,"CHAIR",50.00),
(02,"KNIFE",10.00),
(03,"CACHAÇA",12.30),
(04,"PORN_MOVIE",20.05),
(05,"BONECA_INFLÁVEL",299.90),
(06,"FUZIL_AK47",1050.12)
GO


-- jOIN - JUNTANDO DUAS TABELAS COM AS COLUNAS QUE DEFINIMOS


SELECT ID,NAME,AGE,PRICE,PRODUCT FROM CUSTOMERS, ORDERS WHERE CUSTOMERS.ID = OID
GO

OUTRA ABORDAGEM

SELECT A.ID, A.NAME, A.AGE , B.PRODUCT FROM CUSTOMERS A INNER JOIN ORDERS B ON A.ID = B.CUSTOMERS.ID
GO

TIPOS DE JOIN

INNER JOIN = RETORNA A MESMA QUANTIDADE DE LINHAS DE AMBAS TABELAS
LEFT JOIN = RETORNA O QUE TEM NA TABELA "A" MESMO NÃO TENDO VALOR EM "B"
RIGTH JOIN =  RETORNA O QUE TEM NA TABELA "B" MESMO NÃO TENDO VALOR EM "A"
FULL JOIN = RETORNA TODAS AS LINHAS QUE COMBINAM EM AMBAS TABELAS
SELF JOIN = JUNTAR A TABELA COM ELA MESMA RENOMEANDO A SEGUNDA CÓPIA COMO SE FOSSE O MERGE
CARTESIAN JOIN = RETORNA UM PRODUTO CARTESIANO DOS DADOS DE DUAS OU MAIS TABELAS



----------- SubQueryes -------------------
Syntax basica

SELECT column_name [, column_name ] 
FROM   table1 [, table2 ] 
WHERE  column_name OPERATOR 
   (SELECT column_name [, column_name ] 
   FROM table1 [, table2 ] 
   [WHERE]) 



eX:
SELECT *  
   FROM CUSTOMERS
   WHERE ID IN (SELECT ID FROM CUSTOMERS WHERE SALARY > 4500)

Para ser subqueryes 

Precisa estar entre parenteses
Usada geralmente com SELECT e FROM (mais indicada para consulta)


************ Subquerie com insert ***************

INSERT INTO table_name [ (column1 [, column2 ]) ] 
   SELECT [ *|column1 [, column2 ] 
   FROM table1 [, table2 ] 
   [ WHERE VALUE OPERATOR ]

************ Subquerie com update ***************

UPDATE table 
SET column_name = new_value 
[ WHERE OPERATOR [ VALUE ] 
   (SELECT COLUMN_NAME 
   FROM TABLE_NAME) 
   [ WHERE) ] 

Ex: UPDATE CUSTOMERS 
   SET SALARY = SALARY * 0.25 
   WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP WHERE AGE >= 27 )

************ Subquerie com delete ***************

DELETE FROM TABLE_NAME 
[ WHERE OPERATOR [ VALUE ] 
   (SELECT COLUMN_NAME 
   FROM TABLE_NAME) 
   [ WHERE) ] 


ex:DELETE FROM CUSTOMERS 
   WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP WHERE AGE >=27 )


*************** Mais comandos do Transact SQL ****************** 

Tirando uma base do mapeamento

use master; -- usando nesse caso a instância com maior previlégio
ALTER DATABASE exemplo
SET SINGLE_USER -- um usuário permitido fazendo alteração
GO

USE master;
GO
EXEC SP_DETACH_DB @DBNAME = 'EXEMPLO' -- isso faz com que a base suma das demais bases mapeadas no ambiente porém ela ainda permanece no disco
GO

*** Agora considere que queremos mapear alguma base de dados 

EXEC SP_ATTACH_DB_NAME @DBNAME = 'bancoX,
@FILENAME1='C:\USERS\SYSTEM\BLA BLA BLA\ARQUIVO.MDF',
@FILENMAE2 = 'C:\USERS\SYSTEM\BLA BLA BLA\ARQUIVO.LDF'
GO
	
-- Dessa forma ela retorna para nossa area de trabalho no studio.


*** CONECTANDO O STUDIO EM OUTRO SQL SERVER OUTRO BANCO ****

Precisa do conector via ODBC - Baixe no mysql site

Depois digite na pesquisa do windows 10 está tambem em ferramentas administrativas do windows 

ODBC 64 ou ODBC 32 ou Data source administration

na aba dns de sistema clique em adcionar
Procure o driver do seu banco no caso estamos usando o do mysql ODBC, crie um nome e as demais configurações
Concluir,Aplicar Sair

Agora no ms studio
clique na pasta objetos de servidor com botão direito -> novo vinculo
Servidro Vinculado: qualquer nome
Provedor: Microsoft OLE DB Provider for ODBC Drivers
Nome do Produto: algum nome qualquer
Fonte de dados: nome do link que criamos lá no odbc driver 32 bits ou 64 do dns do sistema

na aba segurança mude para Serão feitas usando contexto de segurança no box (senha e login)

press ok

Vá na aba servidores vinculados->catalogo do sistemas veja qe todas as bases
do mysql estão acessiveis

Como utilizar:

select  * from openquery(mysql,'select * from sakila.actor')
go

mysql foi o nome do vínculo que criei,chamei a database.tabela

pesquisar insert e outras operações
 


******** Criando databases com FileGroup *********** 

-- Nesse caso é o padrão MDF e LDF. Porém é a mesma lógica para outros grupos.

-- PRIMEIRO O ARQUIVO PRIMARY

use master
go
CREATE DATABASE bancoX
ON
(NAME = bancoX,
FILENAME = 'c:\LOCAL\ONDE\GUARDA\ARQUIVO.mdf',
SIZE = 10, -- TAMANHO EM MEGAS	
MAXSIZE = 50,
FILEGROWTH = 5)
GO
-- AGORA O LOG

LOG ON 
(NAME = bancoX_log,
FILENAME = 'c:\LOCAL\ONDE\GUARDA\ARQUIVO.ldf',
SIZE = 5,
MAXSIZE = 25MB.
FILEGROWTH = 5MB)
GO

********** CRIANDO LOGIN´s  ***************

-- PUBLIC LOGIN 
CREATE LOGIN joazinho WITH PASSWORD = '#@$%¨kfkl'
GO

-- MUDANDO A SENHA QUANDO NO PRIMEIRO ACESSO
-- ATENÇÃO - CHECK_EXPIRATION PRECISA ESTAR ON

CREATE LOGIN joazinho WITH PASSWORD = '$%¨#W' MUST_CHANGE 
GO

-- NOVO ADMINISTRADOR DA MÁQUINA (sERVER)

CREATE LOGIN [nomeMaquina\joãzinho] FROM WINDOWS
GO -- Aqui só se já existir outro usuário no server e 
dai tu atribui na entrada outro cabra

******* criando um login para um determinado bd *******
--Ver demais padrões default de acesso(public,maintenence,owner...)

CREATE LOGIN testesauro WITH PASSWORD = '123'
USE dbqualquer
CREATE USER testesauro_manutencao FOR LOGIN testesauro WITH DEFAULT_SCHEMA = [Maintenance]
GO


******** backup  na unha ***************

backup full - faz backup de tudo

BACKUP DATABASE [dbqualquer]
TO DISK = N 'C:\PASTA\PASTA\PASTA\BACKUPX.bak'	
WITH
	NOFORMAT,
	NOINIT,
	NAME = N'NOME_DO_BACKUP',
	SKIP,
	NOREWIND,
	NOUNLOAD,
	STATS = 10 -- retorna o progresso de 10 em 10
GO	

----------------------------------------------------------------------------------------------------------

backup diferencial OU INCREMENTAL = acrescenta só as informações que foram alteradas desde o ultimo backup

BACKUP DATABASE [dbqualquer]
TO DISK = N 'C:\PASTA\PASTA\PASTA\BACKUPX.bak'	
WITH
	DIFERENTIAL,
	NOFORMAT,
	NOINIT,
	NAME = N'NOME_DO_BACKUP DIFERENCIAL',
	SKIP,
	NOREWIND,
	NOUNLOAD,
	STATS = 10 -- retorna o progresso de 10 em 10
GO	
	
-----------------------------------------------------------------------------------------------------------

backup de logs de transação


BACKUP LOG [dbqualquer]
TO DISK = N 'C:\PASTA\PASTA\PASTA\BACKUPXlog.trn' -- veja que mudou a extensão
	
WITH
	NOFORMAT,
	NOINIT,
	NAME = N'NOME_DO_BACKUP',
	SKIP,
	NOREWIND,
	NOUNLOAD,
	STATS = 10 -- retorna o progresso de 10 em 10
GO	


/********** VERIFICANDO AS CONSISTÊNCIAS E DEMAIS PROBLEMAS DE BASE E DISCO ***********************/

Verificar consistência do espaço em disco

use nomedatabase;
go

DBCC CHECKALLOC
GO

Verificar a integridade do banco atual

use nomedatabase;
go

DBCC CHECKCATALOG
GO


Vefiricar a integridade lógica e fisica dos objetos do banco de dados

use nomedatabase;
go

DBCC CHECKDB
GO


Reduzir o tamanho do arquivo de log

use nomedatabase
go

DBCC SHRINKDATABASE (nomedatabase,TRUNCATEONLY)

Reduzir o tamanho dos dados de arquivo de log do banco de dados em uso

use nomedatabase
go

ALTER DATABASE databasequalquer -- mudando para recuperação simples
SET RECOVERY SIMPLE
GO

--comprimindo o arquivo de log para 1 mb

DBCC SHRINKFILE (nomedatabase,1)
GO

-- Fazendo um reset no recovery que foi feito

ALTER DATABASE nomedatabase
SET RECOVERY FULL
GO

-- CHECANDO FILE GROUP

use nomedatabase
DBCC CHECKFILEGROUP
go 

-- MONSTRANDO ESTATISTICAS DE USO
DBCC SHOW_STATISTICS 
GO


*********** CRIANDO ESTATÍSTICAS DE USO A PARTIR DO TERMINAL *************

USE databasequaquer
EXEC sp_helpstats 'nomedatabela' ,'all'
GO

*Mas temos que criar a estatisticas sobre a coluna que queremos analisar

CREATE STATISTICS nomeDaEstatistica
ON tabelaNomeaSerUsada(coluna)


---------- Criando um job na Unha -----------------------------------------
Os jobs são ações agendadas(Qualquer alteração ou Otimização...)no banco

USEmsdb;
GO
-- CRIANDO UM JOB PARA SER EXECUTADO PELO SQL SERVER AGENT 
EXECdbo.sp_add_job
@job_name = NBACKUP SEMANAL;
GO
-- ADICIONANDO UMA OPERAÇÃO AO JOB 
EXEC sp_add_jobstep
@job_name = NBACKUP SEMANAL,
@step_name = NSomente Leitura,
@subsystem = NTSQL,
@command = NALTER DATABASE ESTUDANTES SET READ_ONLY,
@retry_attempts =5, -- número de tentativas no caso de erro 
@retry_interval =5; -- no caso de erro executar em 5 minutos novamente 
GO
-- AGENDANDO O JOB PARA EXECUTAR 
EXECdbo.sp_add_schedule
@schedule_name = NRunOnce,
@freq_type =1, -- - uma unica vez 
@active_start_time =233000; -- o horário que será executado é as 23:00:00 
USEmsdb;
GO
-- SETANDO O AGENDAMENTO 
EXEC sp_attach_schedule
@job_name = NBACKUP SEMANAL,
@schedule_name = NRunOnce;
GO
-- CRIANDO O JOB NO SERVIDOR
EXECdbo.sp_add_jobserver
@job_name = NBACKUP SEMANAL;
GO


-- Note que é preciso criar a procedure antes de executar

CREATE procedure [dbo].[sp_add_job_quick] 
@job nvarchar(128),
@mycommand nvarchar(max), 
@servername nvarchar(28),
@startdate nvarchar(8),
@starttime nvarchar(8)
as